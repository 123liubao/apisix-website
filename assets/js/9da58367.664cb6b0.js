(self.webpackChunk=self.webpackChunk||[]).push([[5994],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return l},kt:function(){return m}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),c=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=c(e.components);return a.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=c(t),m=r,h=d["".concat(p,".").concat(m)]||d[m]||u[m]||i;return t?a.createElement(h,o(o({ref:n},l),{},{components:t})):a.createElement(h,o({ref:n},l))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=d;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2770:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return o},metadata:function(){return s},toc:function(){return p},default:function(){return l}});var a=t(2122),r=t(9756),i=(t(7294),t(3905)),o={title:"ApisixRoute"},s={unversionedId:"concepts/apisix_route",id:"concepts/apisix_route",isDocsHomePage:!1,title:"ApisixRoute",description:"\x3c!--",source:"@site/docs/apisix-ingress-controller/concepts/apisix_route.md",sourceDirName:"concepts",slug:"/concepts/apisix_route",permalink:"/docs/ingress-controller/concepts/apisix_route",editUrl:"https://github.com/apache/apisix-ingress-controller/edit/master/docs/en/latest/concepts/apisix_route.md",version:"current",frontMatter:{title:"ApisixRoute"},sidebar:"docs",previous:{title:"ApisixTls Reference",permalink:"/docs/ingress-controller/references/apisix_tls"},next:{title:"ApisixUpstream",permalink:"/docs/ingress-controller/concepts/apisix_upstream"}},p=[{value:"Path based route rules",id:"path-based-route-rules",children:[]},{value:"Advanced route features",id:"advanced-route-features",children:[]},{value:"Service Resolution Granularity",id:"service-resolution-granularity",children:[]},{value:"Weight Based Traffic Split",id:"weight-based-traffic-split",children:[]},{value:"Plugins",id:"plugins",children:[]},{value:"Websocket Proxy",id:"websocket-proxy",children:[]}],c={toc:p};function l(e){var n=e.components,t=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ApisixRoute")," is a CRD resource which focus on how to route traffic to\nexpected backend, it exposes many features supported by Apache APISIX.\nCompared to ",(0,i.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/services-networking/ingress/"},"Ingress"),",\nfunctions are implemented in a more native way, with stronger semantics."),(0,i.kt)("h2",{id:"path-based-route-rules"},"Path based route rules"),(0,i.kt)("p",null,"URI path are always used to split traffic, for instance, requests with host ",(0,i.kt)("inlineCode",{parentName:"p"},"foo.com")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"/foo")," prefix should be routed to service ",(0,i.kt)("inlineCode",{parentName:"p"},"foo")," while requests which path is ",(0,i.kt)("inlineCode",{parentName:"p"},"/bar"),"\nshould be routed to service ",(0,i.kt)("inlineCode",{parentName:"p"},"bar"),", in the manner of ",(0,i.kt)("inlineCode",{parentName:"p"},"ApisixRoute"),", the configuration\nshould be:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: apisix.apache.org/v2alpha1\nkind: ApisixRoute\nmetadata:\n  name: foo-bar-route\nspec:\n  http:\n  - name: foo\n    match:\n      hosts:\n      - foo.com\n      paths:\n      - "/foo*"\n    backend:\n     serviceName: foo\n     servicePort: 80\n  - name: bar\n    match:\n      paths:\n        - "/bar"\n    backend:\n      serviceName: bar\n      servicePort: 80\n')),(0,i.kt)("p",null,"There are two path types can be used, ",(0,i.kt)("inlineCode",{parentName:"p"},"prefix")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"exact"),", default is ",(0,i.kt)("inlineCode",{parentName:"p"},"exact"),",\nwhile if ",(0,i.kt)("inlineCode",{parentName:"p"},"prefix")," is desired, just append a ",(0,i.kt)("inlineCode",{parentName:"p"},"*"),", for instance, ",(0,i.kt)("inlineCode",{parentName:"p"},"/id/*")," matches\nall paths with the prefix of ",(0,i.kt)("inlineCode",{parentName:"p"},"/id/"),"."),(0,i.kt)("h2",{id:"advanced-route-features"},"Advanced route features"),(0,i.kt)("p",null,"Path based route are most common, but if it's not enough, try\nother route features in ",(0,i.kt)("inlineCode",{parentName:"p"},"ApisixRoute")," such as ",(0,i.kt)("inlineCode",{parentName:"p"},"methods"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"exprs"),"."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"methods")," splits traffic according to the HTTP method, the following configurations routes requests\nwith ",(0,i.kt)("inlineCode",{parentName:"p"},"GET")," method to ",(0,i.kt)("inlineCode",{parentName:"p"},"foo")," service (a Kubernetes Service)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apisix.apache.org/v2alpha1\nkind: ApisixRoute\nmetadata:\n  name: method-route\nspec:\n  http:\n    - name: method\n      match:\n        paths:\n        - /\n        methods:\n        - GET\n      backends:\n        - serviceName: foo\n          servicePort: 80\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"exprs")," allows user to configure match conditions with arbitrary predicates in HTTP, such as queries, HTTP headers, Cookie.\nIt's composed by several expressions, which in turn composed by subject, operator and value/set."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apisix.apache.org/v2alpha1\nkind: ApisixRoute\nmetadata:\n  name: method-route\nspec:\n  http:\n    - name: method\n      match:\n        paths:\n          - /\n        exprs:\n          - subject:\n              scope: Query\n              name: id\n            op: Equal\n            value: 2143\n      backends:\n        - serviceName: foo\n          servicePort: 80\n")),(0,i.kt)("p",null,"The above configuration configures an extra route match condition, which asks the\nquery ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," must be equal to ",(0,i.kt)("inlineCode",{parentName:"p"},"2143"),"."),(0,i.kt)("h2",{id:"service-resolution-granularity"},"Service Resolution Granularity"),(0,i.kt)("p",null,"By default a referenced Service will be watched, so\nit's newest endpoints list can be updated to Apache APISIX.\napisix-ingress-controller provides another mechanism that just use\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"ClusterIP")," of this service, if that's what you want, just set\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"resolveGranularity")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"service")," (default is ",(0,i.kt)("inlineCode",{parentName:"p"},"endpoint"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apisix.apache.org/v2alpha1\nkind: ApisixRoute\nmetadata:\n  name: method-route\nspec:\n  http:\n    - name: method\n      match:\n        paths:\n          - /*\n        methods:\n          - GET\n      backends:\n        - serviceName: foo\n          servicePort: 80\n          resolveGranularity: service\n")),(0,i.kt)("h2",{id:"weight-based-traffic-split"},"Weight Based Traffic Split"),(0,i.kt)("p",null,"There can more than one backend specified in one route rule,\nwhen multiple backends co-exist there, the traffic split based on weights\nwill be applied (which actually uses the ",(0,i.kt)("a",{parentName:"p",href:"http://apisix.apache.org/docs/apisix/plugins/traffic-split/"},"traffic-split")," plugin in Apache APISIX).\nYou can specify weight for each backend, the default weight is ",(0,i.kt)("inlineCode",{parentName:"p"},"100"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: apisix.apache.org/v2alpha1\nkind: ApisixRoute\nmetadata:\n  name: method-route\nspec:\n  http:\n    - name: method\n      match:\n        paths:\n          - /*\n        methods:\n          - GET\n        exprs:\n          - subject:\n              scope: Header\n              name: User-Agent\n            op: RegexMatch\n            value: ".*Chrome.*"\n      backends:\n        - serviceName: foo\n          servicePort: 80\n          weight: 100\n        - serviceName: bar\n          servicePort: 81\n          weight: 50\n')),(0,i.kt)("p",null,"The above ",(0,i.kt)("inlineCode",{parentName:"p"},"ApisixRoute")," has one route rule, which contains two backends ",(0,i.kt)("inlineCode",{parentName:"p"},"foo")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"bar"),", the weight ratio is ",(0,i.kt)("inlineCode",{parentName:"p"},"100:50"),",\nwhich means ",(0,i.kt)("inlineCode",{parentName:"p"},"2/3")," requests (with ",(0,i.kt)("inlineCode",{parentName:"p"},"GET")," method and ",(0,i.kt)("inlineCode",{parentName:"p"},"User-Agent")," matching regex pattern ",(0,i.kt)("inlineCode",{parentName:"p"},".*Chrome.*"),") will be sent to service ",(0,i.kt)("inlineCode",{parentName:"p"},"foo")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"1/3")," requests\nwill be proxied to serivce ",(0,i.kt)("inlineCode",{parentName:"p"},"bar"),"."),(0,i.kt)("h2",{id:"plugins"},"Plugins"),(0,i.kt)("p",null,"Apache APISIX provides more than 40 ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/apache/apisix/tree/master/docs/en/latest/plugins"},"plugins"),", which can be used\nin ",(0,i.kt)("inlineCode",{parentName:"p"},"ApisixRoute"),". All configuration items are named same to the one in APISIX."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apisix.apache.org/v2alpha1\nkind: ApisixRoute\nmetadata:\n  name: httpbin-route\nspec:\n  http:\n    - name: httpbin\n      match:\n        hosts:\n        - local.httpbin.org\n        paths:\n          - /*\n      backends:\n        - serviceName: foo\n          servicePort: 80\n      plugins:\n        - name: cors\n          enable: true\n")),(0,i.kt)("p",null,"The above configuration enables ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/apache/apisix/blob/master/docs/en/latest/plugins/cors.md"},"Cors")," plugin for requests\nwhich host is ",(0,i.kt)("inlineCode",{parentName:"p"},"local.httpbin.org"),"."),(0,i.kt)("h2",{id:"websocket-proxy"},"Websocket Proxy"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/WebSocket#:~:text=WebSocket%20is%20a%20computer%20communications,WebSocket%20is%20distinct%20from%20HTTP."},"Websocket")," service can be proxied\nby creating a route with specifying the ",(0,i.kt)("inlineCode",{parentName:"p"},"websocket")," field."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apisix.apache.org/v2alpha1\nkind: ApisixRoute\nmetadata:\n  name: ws-route\nspec:\n  http:\n    - name: websocket\n      match:\n        hosts:\n          - ws.foo.org\n        paths:\n          - /*\n      backends:\n        - serviceName: websocket-server\n          servicePort: 8080\n      websocket: true\n")))}l.isMDXComponent=!0}}]);